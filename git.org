#+TITLE: Keeping track of file changes with git
#+AUTHOR: Heikki Lehv\auml{}slaiho
#+EMAIL:     heikki.lehvaslaiho@kaust.edu.sa
#+DATE:      Command line programming for biologists \\ 22-24 Oct 2011
#+DESCRIPTION:
#+KEYWORDS: UNIX, LINUX , CLI, history, summary, command line  
#+LANGUAGE:  en
#+OPTIONS:   H:3 num:t toc:nil \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+INFOJS_OPT: view:nil toc:nil ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+LINK_UP:   
#+LINK_HOME: 
#+XSLT:

#+startup: beamer
#+LaTeX_CLASS: beamer
##+LaTeX_CLASS_OPTIONS: [bigger]

##+BEAMER_FRAME_LEVEL: 2

#+COLUMNS: %40ITEM %10BEAMER_env(Env) %9BEAMER_envargs(Env Args) %4BEAMER_col(Col) %10BEAMER_extra(Extra)

# TOC slide before every section
#+latex_header: \AtBeginSection[]{\begin{frame}<beamer>\frametitle{Topic}\tableofcontents[currentsection]\end{frame}}

## see http://deic.uab.es/~iblanes/beamer_gallery/

##+latex_header: \mode<beamer>{\usetheme{Madrid}}
#+latex_header: \mode<beamer>{\usetheme{Antibes}}
##+latex_header: \mode<beamer>{\usecolortheme{wolverine}}
#+latex_header: \mode<beamer>{\usecolortheme{beaver}}
#+latex_header: \mode<beamer>{\usefonttheme{structurebold}}

#+latex_header: \logo{\includegraphics[width=1cm,height=1cm,keepaspectratio]{img/logo-kaust}}

## define colours for code listings
\definecolor{keywords}{RGB}{255,0,90}
\definecolor{comments}{RGB}{60,179,113}
\definecolor{fore}{RGB}{249,242,215}
\definecolor{back}{RGB}{51,51,51}
\lstset{
  basicstyle=\color{fore},
  keywordstyle=\color{keywords},
  commentstyle=\color{comments},
  backgroundcolor=\color{back}
}


* Why git?

- It is a file revision control system, one of many:
  + git
  + mercurial
  + bazaar
  + subversion, old

- *EVERYONE* needs to keep track of changes in their files
- everyone should and everyone needs to at this course 

* What is git

- Git is a free distributed revision control, or software source code
  management, project with an emphasis on being fast. Git was
  initially designed and developed by Linus Torvalds for Linux kernel
  development.

- Every Git working directory is a full-fledged repository with
  complete history and full revision tracking capabilities, not
  dependent on network access or a central server.

- Git has a very powerfull command and option set. Some defaults need
  to be set in new projects to streamline the workflow.

* Using git: starting up

Start by telling git your contact details:

#+BEGIN_SRC shell
  $ git config --global user.name "Your Name"
  $ git config --global user.email \
    "your.name@kaust.edu.sa"
#+END_SRC

Since git is a distributed version controlling system, you can use it
for any directory. Simply run: 

#+BEGIN_SRC shell
  $ git init
#+END_SRC

* Ignoring files

Your directories will inevitably end up having temporary files that
you do not want to back up. Create or reuse a .gitignore file into the
root directory. 

- These lines in .gitignore ignore typical emacs temporary files:

  \\
  \ast\tilde\\
  \ast\#\\
  .\#\ast


* Using git: adding and moving files

git commit command takes note of only those files that have been 'add'ed.

#+BEGIN_SRC shell
  $ git add .
  $ git commit -a -m 'note about the commit'
#+END_SRC


*Important*: If you want to rename a file or directory that is under
git, do not use the normal 'mv' command. Git can keep track of the
change, if you do:

#+BEGIN_SRC shell
  $ git mv filename newfilename
#+END_SRC

Similarly, remove a file from disk and git at the same time:

#+BEGIN_SRC shell
  $ git rm filename
#+END_SRC

See: man pages git, gittutorial

* Creating a new local git repository

You can create the new local project directory or simply
add files from an existing directory into this repository:
 
#+BEGIN_SRC shell
  $ mkdir myproj
  $ cd myproj
  $ git init
#+END_SRC

Add files and content, e.g.:

#+BEGIN_SRC shell
  $ echo "text" > readme
#+END_SRC

Tell git not to keep track of emacs backup files, e.g. 

#+BEGIN_SRC shell
  $ echo '*~' > .gitignore
  $ git add .
  $ git commit -a -m 'first commit'
#+END_SRC

* Working with files

While working with files, you can check the status any time with:

#+BEGIN_SRC shell
  $ git status
  $ git log (filename)
  $ git diff filename
  $ git blame filename
  $ gitk
#+END_SRC

and commit any set of changes.

#+BEGIN_SRC shell
  $ git commit -a -m 'short description of changes'
#+END_SRC

* Recovering files

If you notice (git status) that you have accidentally removed a file,
you can fetch the latest committed version by:

#+BEGIN_SRC shell
  $ git checkout filename
#+END_SRC

* More advanced git

Git contains powerful mechanisms to 

- branch
- merge versions
- study older versions

* Installing git

** Ubuntu: 'sudo apt-get install git-core'
** for other OS see: http://git-scm.com/
or
** Mac OSX: http://code.google.com/p/git-osx-installer/
** MS Windows: http://code.google.com/p/msysgit/

* Documentation

- Official: http://git-scm.com/documentation
- http://progit.org/book/ - the best book
- http://gitref.org/ - reference card expanded to a web site
- http://book.git-scm.com/index.html
- http://git-scm.com/course/svn.html - for subversion users
- http://www.kernel.org/pub/software/scm/git/docs/everyday.html


* git command summary

#+BEGIN_SRC shell
$ git init
$ git status
$ git add .
$ git commit -a -m 'comment'
#+END_SRC
