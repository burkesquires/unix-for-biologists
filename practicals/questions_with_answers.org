#+TITLE:  Unix questions and answers
#+AUTHOR: Heikki Lehv\auml{}slaiho
#+EMAIL:     heikki.lehvaslaiho@kaust.edu.sa
#+DATE:      Command line programming for biologists \\ 22-24 Oct 2011
#+DESCRIPTION:
#+KEYWORDS: UNIX, LINUX , CLI, history, summary, command line  
#+LANGUAGE:  en
#+OPTIONS:   H:3 num:t toc:t \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+INFOJS_OPT: view:nil toc:t ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+LINK_UP:   
#+LINK_HOME: 
#+XSLT:

#+startup: beamer
#+LaTeX_CLASS: beamer
##+LaTeX_CLASS_OPTIONS: [bigger]

#+BEAMER_FRAME_LEVEL: 2

#+COLUMNS: %40ITEM %10BEAMER_env(Env) %9BEAMER_envargs(Env Args) %4BEAMER_col(Col) %10BEAMER_extra(Extra)

# TOC slide before every section
#+latex_header: \AtBeginSection[]{\begin{frame}<beamer>\frametitle{Topic}\tableofcontents[currentsection]\end{frame}}

## see http://deic.uab.es/~iblanes/beamer_gallery/

##+latex_header: \mode<beamer>{\usetheme{Madrid}}
#+latex_header: \mode<beamer>{\usetheme{Antibes}}
##+latex_header: \mode<beamer>{\usecolortheme{wolverine}}
#+latex_header: \mode<beamer>{\usecolortheme{beaver}}
#+latex_header: \mode<beamer>{\usefonttheme{structurebold}}

#+latex_header: \logo{\includegraphics[width=1cm,height=1cm,keepaspectratio]{img/logo-kaust}}

## define colours for code listings
\definecolor{keywords}{RGB}{255,0,90}
\definecolor{comments}{RGB}{60,179,113}
\definecolor{fore}{RGB}{249,242,215}
\definecolor{back}{RGB}{51,51,51}
\lstset{
  basicstyle=\color{fore},
  keywordstyle=\color{keywords},
  commentstyle=\color{comments},
  backgroundcolor=\color{back}
}


* Session: Unix operating system

** 1.
List the of the most important features of a Unix system.

\pause
 
  + Multiple users
  + Multitasking
  + Memory protection

  It has other features but they are all subsets of these
  features. E.g. access privileges is part of the multiple user
  system, being able to switch between graphics and command line is
  part of the multitasking feature, and not crashing part of the
  memory protection feature.

** 2.
What does a "kernel" do?

\pause

- The kernel is the core of the operating system. It abstracts the
  hardware so that the user does not need to deal directly with the
  hardware (computer's physical parts). It also offers other features,
  such as those listed above, e.g, task scheduling. Operating systems
  are programs that allow other programs to run, and which control
  computer hardware. The kernel is the most important part of an OS.

** 3.
What is the main difference between a command line and graphical
  interface?

\pause

- On a command line (CLI) you type instructions to the computer, an a
  graphical interface (GUI) you click with the mouse (cursor) and
  manipulate graphical objects.


** 4.
Why do you have to "log in"? Give examples of login names, two
  examples of good passwords, and two examples of bad passwords.

\pause

- You have to log in, because Linux is a multiple user system.
  This prevents users from tampering with each others' files. Examples
  of logins 
  + root
  + nobody

  Examples of good passwords are:
  + 4AZgoo\^\&
  + fvr@#$l2

  Examples of bad passwords are 
  + bob
  + j0ebob

** 5.
Give the path to your home directory. 

\pause

#+begin_src sh
  cd ; pwd 
#+end_src

- Under common LINUX systems your login name is
  \texttt{/home/username}.  So, if you login as user bob, your home
  directory is at \texttt{/home/bob}, most likely.

  Under Mac OS, you are at \texttt{/Users/username}

* Session: Files in Unix

** 1.
Give an example of a file which does not need a file name
  extension but which can nevertheless be viewed properly on Linux.

\pause

- Plain text can be viewed properly without filename extension.

** 2.
What is the difference between relative and an absolute path?
  Give an example of the relative path to the guides directory you
  copied in the ssh exercise, and then give the absolute path to the
  that directory.

\pause

- Absolute paths include the top of the filesystem, root (/). The
  absolute path to the guides directory is thus
  \texttt{/Users/username/guides}. The relative path, assuming we are
  in our home directory, is \texttt{./guides}.

** 3.
Use the command which shows your current working directory to
  find out the path of you home directory. 

\pause
 

#+begin_src sh
   pwd
#+end_src

  It should show something like \texttt{home/username} or
  \texttt{Users/username}. You should type this command immediately
  after logging in if you want the path to your home directory, since
  that is where you are placed after logging in.

** 4.
See what each of these do combined with \texttt{cd} command: ~
  (tilde), - (dash), .. (double dot). What do they do?

\pause

  + Tilde takes you to your home directory \texttt{cd \~ }
  + Dash takes you to the previous directory you were in \texttt{cd -}
  + Double-dot takes you up one level in the hierarchy \texttt{cd ..}

** 5.
Work out how to get recursive directory listing which shows the
  forward-slashes at the end of directory names. Write down the
  command line.

\pause

#+begin_src sh
   ls -RF
#+end_src

** 6.
What is the difference between \texttt{rm} and \texttt{rmdir}?
  Which is more effective in what circumstance (which always works)?

\pause

- \texttt{rm} deletes anything, but only deletes directories when given
  option \texttt{-r}. rmdir deletes directories, but only if they are
  empty. Therefore {rm -r} is more effective since it will destroy
  everything. This makes \texttt{rm -r} extremely dangerous.

** 7.
What will the following series of commands do? 
#+begin_src sh -n
  cp /etc/passwd ~
  mkdir ~/stuff
  cd
  mv passwd stuff/example
  cp stuff/example ~
#+end_src

\pause

- Copy the file \texttt{/etc/passwd} to your home directory(1), make a
  folder in there called “stuff” (2), go to the home directory (3),
  move the passwd file into the folder called “stuff” but rename it
  simultaneously to “example” (4), then copy the file called "example"
  from the folder called “stuff” into the home directory (5).

** 8.
Find out where your previous commands shown by \texttt{history}
  are stored.

\pause

#+begin_src sh
  man history
  less ~/.history
#+end_src

** 9.
The ISO 8601 standard defines the format of date as
  YYYY-MM-DD. What is the command line to get the \texttt{date}
  program to output in the ISO format?

\pause

#+begin_src sh
  man date
  date "+%Y-%m-%d"
#+end_src


** 10.
How do you force \texttt{mv} to move instead of rename? When does
  \texttt{mv} move and when does it rename?

\pause

- \texttt{mv} will move if the target is a directory or includes a
  different directory. If the target is an existing file, \texttt{mv}
  will overwrite (destroy) the file, replacing it with the one you
  renamed.

** 11.
What is the difference between * and ? on the command line?
  What do they match?

\pause

 + * matches anything of any length
 + ? matches any one character (letter or number).

** 12.
What are the three main privilege types? What will

#+begin_src sh
  chmod 755 ~
#+end_src

   do? In this output, what does "wheel" signify : 

#+begin_src sh
   drwxrwxrwx 5  me wheel 170 24 Jan 15:17 Shared
#+end_src

\pause
 
  + Read, write, execute. 

  + The 'chmod 755 ~' will set the home directory to be world-readable
    and world-executable.

  + "wheel" refers to the group that has permissions in that directory.


* Session: Job Control and IO Redirection

** 1.
What is the difference between the & operator and the command
  bg? Once you have used one of these, how do you reverse its effect?
  How do you pause a job? How do you cancel a job? How do you see what
  jobs you have running?

\pause

  & puts the command in the background immediately, bg only does
  so after pausing a job. To bring it to foreground again, use fg. To
  pause, use control-Z. To cancel, use control-C. jobs shows what jobs
  are running in (under that terminal shell).

** 2.
Type 

#+begin_src sh
  ls -aRF /
#+end_src

  It will mess up your screen! Now pause it. Now background
  it. Prove that it is backgrounded by running another command, like
  top. Quit out of top by typing q. Now cancel the backgrounded job by
  first bringing it to the front.

\pause

- The solution to this exercise relies on your understanding the
  answer to (1.) above.

** 3.
How can you use the \texttt{cat} command and IO redirection to copy a file? 

\pause
 
#+begin_src sh
   cat filename > new_filename
#+end_src

** 4.
cat utility exercise. Create two small text
  files, catenate them together  into a new file while numbering all
  non-blank lines.

#+begin_src sh
  cat > first
  Ctrl-D
  cat > second
  Ctrl-D
  cat -b first second > together
#+end_src

* Session: Text Utilities

** 1.
How can you use the cat and grep commands, together with pipes
  to search for pattern in a file?

\pause 

#+begin_src sh
  cat filename | grep pattern
#+end_src


** 2.
How can you use cut, paste and IO redirection to create a new
  file with only the first and second columns?

\pause

One command:

#+begin_src sh
  cut -f 1,3 filename
#+end_src

or broken into smaller steps:

#+begin_src sh
cut -f1 filename > col1
cut -f 3 filename > col3
paste col1 col2
#+end_src



** 3.
File 'data/mimivirus.sw' contains all UniProt entries from these
  giant viruses. How many of these are from TrEMBL and how many from
  Swiss-Prot?

  - Swiss-Prot format: http://web.expasy.org/docs/#DT_line

  - Hint: Use caret to anchor the grep search string to the beginning
    of the line, e.g. "\land ID"

\pause

# mrsclient -H mrs.cbrc.kaust.edu.sa -d uniprot -a mimivirus > mimivirus.dat
# mrsclient -H mrs.cbrc.kaust.edu.sa -d uniprot -a mimivirus -f fasta > mimivirus.fa

#+begin_src sh
  cat mimivirus.sw | grep "^DT"| grep -c Swiss
  cat mimivirus.sw | grep "^DT"| grep -c Tre
  # in one command:
  cat mimivirus.sw | grep "^DT"| \
    grep integrated | cut -d/ -f2| sort| uniq -c
  #  933 Swiss-Prot.
  #  982 TrEMBL.
#+end_src


** 4.
Extract all primary accession numbers from 'data/mimivirus.sw'
  into a file. (http://web.expasy.org/docs/userman.html#AC_line)
  
\pause

#+begin_src sh
  cat mimivirus.sw | grep ^AC | \
    cut -d\; -f1| cut -d\  -f4 > mimi.ac
#+end_src

** 5. 
How many different GO terms have been assigned to mimivirus proteins
  in file 'data/mimivirus.sw'?

\pause

#+begin_src sh
  mimivirus.sw | grep 'GO;'| sort -u | wc -l
  # 308
#+end_src



** 6.
How many sequences are there in the file 'data/mimivirus.fa'?
  How many are 'Uncharacterized'?
  - Fasta format description: http://en.wikipedia.org/wiki/FASTA_format

\pause 

#+begin_src sh
  cat mimivirus.fa | grep -c '>'
  # 1915
  cat mimivirus.fa | grep -c 'Uncharacterized'
  # 607
#+end_src

** 7.
Files 'one.ids' and 'two.ids' in directory data/ are lists of
  mimivirus sequence IDs. How many of the IDs are shared in two files?
  Extract  all IDs that are uniq to file 'two.ids'.

- Hint: Use grep -f

\pause

#+begin_src sh -n
  grep -f one.ids two.ids | wc -l
  # 10
  grep -v -f one.ids two.ids > two_uniq.ids 
#+end_src

** 8.
File 'data/contamination.vulgar' shows exonorate homology search in
  vulgar format (see vulgar.readme). Use command line tools to extract
  target (subject) ids and count them.

\pause 

#+begin_src sh
  cat contamination.vulgar | \
  cut -d\  -f6 | \
  sort -u | \
  wc -l
  # 2174
#+end_src


* Session: Compression and Archiving

** 1.
You have a directory full of files. What would be the best way to
  get the files with a .dat extension from one machine to another over
  a slow network?
 
\pause

- You could copy them to a disk and take them to the remote-machine.

  + Compress and archive them to send less information over the
    network. 

#+begin_src sh
  tar -cvf filename.tar *dat
  gzip filename.tar
  scp filename.tar.gz user@remote.machine.org:
  # or
  tar -zcvf filename.tz *dat
  # or (!)
 tar cf - *dat | ssh user@remote.machine.org \
   tar xf - -C /home/user 
#+end_src


** 2.
You have a tarball that was created with the command 

#+begin_src sh
  tar -zcvf  hooha.tar.gz *
#+end_src

  How can you extract the text (*.txt) files from this archive?
 
\pause

 #+begin_src sh
  tar -zxf hooha.tar.gz *.txt
#+end_src

** 3.
Compress large files in your data directory using program
  \texttt{gzip}. How can you see the compression ratio?
  How can you continue 'grep'ing compressed files?

\pause

#+begin_src sh
  gzip -v mimivirus.dat
  gzip -l mimivirus.dat.gz
  zcat mimivirus.dat.gz| grep -c '>'
  # In Macs:
  gzcat mimivirus.dat.gz| grep -c '>'
#+end_src

* Session: Processes

** 1. 
Your machine is running very slowly because a programs you were
  running is misbehaving. How can you stop this program?
 
\pause

- Find the program.

#+begin_src sh
  ps -aux
  top
#+end_src

- Try to kill the program gently

#+begin_src sh
  kill <id>
#+end_src

- If that does not work, force kill:
 
#+begin_src sh
  kill -9 <id>
#+end_src

** 2.
You wish to backup your home directory by running

#+begin_src sh
  tar -zcvf /home/me/backup.tar.gz home/me
#+end_src

  every Tuesday at l2:00 PM. What would you need to add to the cron
  scheduling utility?

\pause

#+begin_src sh
 0 12 * * 2 tar -zcvf /home/me/backup.tar.z /home/me/
#+end_src

** 3.
You would want to turn off your computer after midnight using the
  poweroff command. How can you do this?

\pause 

#+begin_src sh
  # as root
  at 00:00 poweroff
  # compare to
  shutdown 00:00
#+end_src

#* 4.
#un the following commands in the remote server and observe what happens.
#
#+begin_src sh -n
# loop()  { while  echo ;  do "$@" ; sleep 2 ; done; }
# loop date  > time.log &
# tail -f time.log
# Ctrl-C
#+end_src
#
# Then and exit from the remote computer.
# After a minute, log in again and see what has happened.
#
# Next, read about program \texttt{nohup} and try again while
# prepending it to the line 1.
#
#pause 
#
# Nohup makes commands immune to HUP (HangUP) signal that is sent to
# all user processes when user logs off.
#
# This is one of the standard ways of executing long running jobs in a
# remote computer.

** 4.
Most unix computers have either curl or wget utilify. Use one of
  them to copy ftp://rcserver/pub/bio/databases/OMIM/omim.txt.Z from
  the KAUST FTP site. Use the file utility to find the type of the
  file and uncompress it. Count the number of entries in the file.

\pause

#+begin_src sh -n
wget ftp://rcserver/pub/bio/databases/OMIM/omim.txt.Z
file omim.txt.Z
uncompress omim.txt.Z
head omim.txt
cat omim.txt | grep -c '^\*RECORD\*$'
#+end_src
21395

* Session: Shells
** 1.
You have a program in \texttt{/home/me/vital/statistics/} that
  you use regularly. How can you make it so that this program be run
  easily no matter which directory you are currently in?
 
\pause

- You need to add \texttt{/home/me/vital/statistics} to the PATH
  variable. Add this line to \texttt{~/.bash\_profile} file. Create
  it, if it does not exist.

#+begin_src sh
	export PATH=$PATH:/home/me/vital/statistics
#+end_src

In most system you can use the predefined environmental variable $HOME to add:

#+begin_src sh
	export PATH=$PATH:$HOME/vital/statistics
#+end_src

** 2.
You often use the \texttt{ls} command to list the files in a
  directory, but you are lazy and would prefer to use same amount of
  key strokes to output the long listing format. Create command
  \texttt{ll} so that it does that automatically.  Add coloring of
  files into ls and ll commands as an added bonus.

\pause

#+begin_src sh
  alias ls='ls --color-auto'
  alias ll='ls -al --color=auto'
#+end_src

** 3.
Secure your shell environment from human errors and make
  \texttt{rm} and \texttt{mv} commands ask you for confirmation before
  doing anything. Make this change permanent.

\pause 

Check the manual pages of the commands for the suitable option.
Use alias to test the effect.

#+begin_src sh
  alias rm='rm -i'
  alias mv='mv -i'
#+end_src

Store these aliases in ~/.bashrc file and source it.

** 4.
- Single most useful UNIX command line I have takes input lines
  (e.g. identifers) sorts them, counts each unique line, displays them
  sorted most common first. Create a command line tool 'countsort'
  that does it.

\pause

#+begin_src sh
countsort () { 
    sort "$@" | uniq -c | sort -nr
}
#+end_src

* Session: Bash programming
** 1.
Create a bash script greet.sh that greets you with your login
  name. Include useful information about the system
  (e.g. use the command \texttt{w}). Call that program when you log in
  to the *remote* computer.

\pause


#+begin_src sh -n 
#!/bin/bash
echo 
echo Welcome back, $USER
echo ----- Current status ------------------
w
echo ---------------------------------------
#+end_src

Call the script 'greet.sh' and place it in the $HOME/bin. Add a line
calling it to the end of $HOME/.bash\_profile because it is sourced
once when the user logs in. 

** 2.
Expand the greet program to include time of the day. E.g. say
  "Morning" before noon, "Afternoon" before 6 PM, and "Evening" after
  6 PM.

  - Hint: Use information from the \texttt{date} program to determine
    the time. Use a variable to store the time.

\pause
#+begin_src sh
#! /bin/bash
TIME=$(date +%H) # 24h 
if [ $TIME -lt 12 ]; then
    echo "Good morning!"
elif [ $TIME -lt 18 ]; then
    echo "Good afternoon!"
else
    echo "Evening!"
fi
#+end_src

** 3.
Write a wrapper for the programme you most often use in command line
  (blast) in bioinformatics or otherwise. Document each code block,
  check for input, exit with usage statment if anything is wrong.

