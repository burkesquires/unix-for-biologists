#+TITLE: Bash programming basics
#+AUTHOR: Heikki Lehv\auml{}slaiho
#+EMAIL:     heikki.lehvaslaiho@kaust.edu.sa
#+DATE:      2011-11-19 \\ CC BY-SA 3.0
#+DESCRIPTION:
#+KEYWORDS: UNIX, LINUX , CLI, history, summary, command line  
#+LANGUAGE:  en
#+OPTIONS:   H:3 num:t toc:nil \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+INFOJS_OPT: view:nil toc:t ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+LINK_UP:   
#+LINK_HOME: 
#+XSLT:

#+startup: beamer
#+LaTeX_CLASS: beamer
##+LaTeX_CLASS_OPTIONS: [bigger]

##+BEAMER_FRAME_LEVEL: 2

#+COLUMNS: %40ITEM %10BEAMER_env(Env) %9BEAMER_envargs(Env Args) %4BEAMER_col(Col) %10BEAMER_extra(Extra)

# TOC slide before every section
#+latex_header: \AtBeginSection[]{\begin{frame}<beamer>\frametitle{Topic}\tableofcontents[currentsection]\end{frame}}

## see http://deic.uab.es/~iblanes/beamer_gallery/

##+latex_header: \mode<beamer>{\usetheme{Madrid}}
#+latex_header: \mode<beamer>{\usetheme{Antibes}}
##+latex_header: \mode<beamer>{\usecolortheme{wolverine}}
#+latex_header: \mode<beamer>{\usecolortheme{beaver}}
#+latex_header: \mode<beamer>{\usefonttheme{structurebold}}

#+latex_header: \logo{\includegraphics[width=1cm,height=1cm,keepaspectratio]{img/logo-kaust}}

## define colours for code listings
\definecolor{keywords}{RGB}{255,0,90}
\definecolor{comments}{RGB}{60,179,113}
\definecolor{fore}{RGB}{249,242,215}
\definecolor{back}{RGB}{51,51,51}
\lstset{
  basicstyle=\color{fore},
  keywordstyle=\color{keywords},
  commentstyle=\color{comments},
  backgroundcolor=\color{back}
}

* Bash is a full featured programming language

- Variables
- Regular expressions
- Operators
- Conditionals
- Loops
- Functions
- User interaction

* Uses

- Interact effortlessly with the UNIX OS
- Store long UNIX commands
  + Add interaction to them
- Wrap programs with complex input
  + fill in default values
  + form categories of command line options
    - e.g. separate BLAST settings for proteins and nucleotides 
* Reference works

+ BASH programming - Introduction HOW-TO
  - http://tldp.org/HOWTO/Bash-Prog-Intro-HOWTO.html
+ Bash Guide for Beginners
  - http://tldp.org/LDP/Bash-Beginners-Guide/Bash-Beginners-Guide.pdf
+ Advanced Bash-Scripting Guide
  - http://tldp.org/LDP/abs/abs-guide.pdf

* Bash configuration files

Places to store your shortcuts and environmental variables. Create
when needed.

- /etc/profile
  + system wide envvars (might call other files)

- $HOME/.bash\_profile
  + user's envvars
  + run once at login

- $HOME/.bashrc
  + user's init file for aliases and functions

- $HOME/.bash\_logout
  + executed when logging out

* Writing Bash scripts in emacs

1. Get a new buffer
2. Sh-script/Set shell type.. (\texttt{C-c : <Return>})
  - defaults to bash
3. Write code
  - pull complex statements from the Sh-script menu
4. Execute your script from
   - emacs  (\texttt{C-c C-x})
   - command line (set execution permissions!)
5. Write code / debug
6. Repeat from step 4 until done

* Shell scripting
- Create a script:
#+begin_src sh -n
#!/bin/bash
# example1.sh
hostname
echo $USER ; date
#+end_src
- Run it:
#+begin_src sh
chmod 755 example1.sh
./example1.sh
#+end_src

* Debugging bash scripts

#+begin_src sh
  #!/bin/bash -x
#+end_src

Output from example1.sh with debugging on:

#+begin_src sh -n
+ hostname
bala
+ echo $USER
heikki
+ date
Wed Oct 19 09:30:22 AST 2011
#+end_src

* Variables

#+begin_src sh -n
#!/bin/bash
# example2_var.sh       
STR="Hello World!"
echo $STR
echo today is $(date +%Y-%m-%d)
#+end_src

- Line 2 creates a variable and assigns it a value
  + using all upper case just a convention
- In line 3, *value* of the variable is returned
- Next, the value of the evaluated expression is returned (line 4)

# local variables

* Conditionals

- *if* [expr1]; *then* stat1 *else if* [expr2]; *then* stat2 *else* stat3 *fi*

#+begin_src sh -n
#!/bin/bash
# example3_if.sh
COUNTER=3
if [ $COUNTER -lt 1 ]; then
    echo zero
else
    echo big counter: $COUNTER
fi
#+end_src

Output:
#+begin_src sh
big counter: 3
#+end_src



* for loop

*for* arg in *[list];* *do* command(s) *done*

#+begin_src sh -n
#!/bin/bash
# example4_for.sh
# for
for i in  1 2 3 ; do
    echo $i
done
# for each file
for i in $(ls); do
    echo -n '- '
    echo $i
done
# for oneliner 
for i in $(ls); do echo $i; done
#+end_src

* while and until
*while* [ condition ]; *do* command(s) *done*

*until* [ condition-is-true ] *do* command(s) *done*

#+begin_src sh -n
#!/bin/bash
# example5_whileuntil.sh
COUNTER=3
while [ $COUNTER -gt 0 ]; do
    echo $COUNTER
    let COUNTER=$COUNTER-1
done
COUNTER=3
until [ $COUNTER -lt 1 ]; do
    echo $COUNTER
    let COUNTER-=1
done
#+end_src

*break* N ; *continue* N

* function

#+begin_src sh -n
#!/bin/bash
# example6_function.sh
function countdown {
    COUNTER=$1
    until [ $COUNTER -lt 1 ]; do
        echo $COUNTER
        let COUNTER-=1
    done
}
countdown 3
exit 0
#+end_src

# do not forget select

* case

 *case* "$var" *in* "$cond1"*)* command ;; "$cond2"*)* command *;;* *esac*

#+begin_src sh -n
#!/bin/bash
# example7_case.sh
case "$1" in
    'dna')
        translate
        ;;
    'protein')
        hydropathy
        ;;
    *)
        usage
esac
#+end_src
- translate, hydropathy and usage are user defined functions!

* Interaction from command line

#+begin_src sh -n
#!/bin/bash
# example8_commandline.sh
if [ -z "$1" ]; then 
    echo usage: $0 directory
    exit
fi
if [ -d "$1" ]; then
    ls "$1"
else
    echo "$1" is not a valid directory
fi
#+end_src


* User input

#+begin_src sh -n
#!/bin/bash
# example9_userinput.sh
echo "Give your name: "
read NAME
echo "Hi $NAME!"
OPTIONS="Hello Quit"
select opt in $OPTIONS; do
  if [ "$opt" = "Quit" ]; then
      echo done ; exit
  elif [ "$opt" = "Hello" ]; then
      echo Hello World
  else
      clear ; echo bad option
  fi
done
#+end_src

* Math

#+begin_src sh -n
  echo 1+1                       # 1+1
  echo $(1+1)                    # 2
  echo $(3/4)                    # 0
  echo 3/2 | bc -l               # .75000000000000000000
  echo 3/2 | perl -lne 'eval $_' # 0.75
#+end_src

- You evaluate math like any statement
- Bash  deals only with integers!
  + Use other programs to deal with other rational numbers


* Arithmetic operators

** Arithmetic operators 				    :BMCOL:B_example:
    :PROPERTIES: 
    :BEAMER_col: 0.5
    :BEAMER_env: block
    :END:
#+begin_src sh
  + (addition)
  - (subtraction)
   * (multiplication)
  / (division)
  % (remainder)
   ** exponentation
  += (plus-equal) 
  -= (minus-equal) 
  *= (times-equal) 
  /= (slash-equal) 
  %= (modulo-equal) 
#+end_src

**  Relational arithmetic operators 			    :BMCOL:B_example:
    :PROPERTIES: 
    :BEAMER_col: 0.5
    :BEAMER_env: block
    :END: 
#+begin_src sh
-lt (<)
-gt (>)
-le (<=)
-ge (>=)
-eq (==)
-ne (!=)
#+end_src

* String comparison

#+begin_src sh
str1 == str2    # str1 matches str2
str1 != str2  # str1 does not match str2
-n str     # str is not null
-z str     # str is null
#+end_src

Zero length string is null.

- Boolean operators

#+begin_src sh 
! (NOT)
&& (AND)
|| (OR)
#+end_src
