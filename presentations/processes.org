#+TITLE: UNIX Fundamentals
#+AUTHOR: Heikki Lehv\auml{}slaiho
#+EMAIL:     heikki.lehvaslaiho@kaust.edu.sa
#+DATE:      2011-11-19 \\ CC BY-SA 3.0
#+DESCRIPTION:
#+KEYWORDS: UNIX, LINUX , CLI, history, summary, command line  
#+LANGUAGE:  en
#+OPTIONS:   H:3 num:t toc:t \n:nil @:t ::t |:t ^:t -:t f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:t skip:nil d:nil todo:t pri:nil tags:not-in-toc
#+INFOJS_OPT: view:nil toc:t ltoc:t mouse:underline buttons:0 path:http://orgmode.org/org-info.js
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+LINK_UP:   
#+LINK_HOME: 
#+XSLT:

#+startup: beamer
#+LaTeX_CLASS: beamer
##+LaTeX_CLASS_OPTIONS: [bigger]

#+BEAMER_FRAME_LEVEL: 2

#+COLUMNS: %40ITEM %10BEAMER_env(Env) %9BEAMER_envargs(Env Args) %4BEAMER_col(Col) %10BEAMER_extra(Extra)

# TOC slide before every section
#+latex_header: \AtBeginSection[]{\begin{frame}<beamer>\frametitle{Topic}\tableofcontents[currentsection]\end{frame}}

## see http://deic.uab.es/~iblanes/beamer_gallery/

##+latex_header: \mode<beamer>{\usetheme{Madrid}}
#+latex_header: \mode<beamer>{\usetheme{Antibes}}
##+latex_header: \mode<beamer>{\usecolortheme{wolverine}}
#+latex_header: \mode<beamer>{\usecolortheme{beaver}}
#+latex_header: \mode<beamer>{\usefonttheme{structurebold}}

#+latex_header: \logo{\includegraphics[width=1cm,height=1cm,keepaspectratio]{img/logo-kaust}}

## define colours for code listings
\definecolor{keywords}{RGB}{255,0,90}
\definecolor{comments}{RGB}{60,179,113}
\definecolor{fore}{RGB}{249,242,215}
\definecolor{back}{RGB}{51,51,51}
\lstset{
  basicstyle=\color{fore},
  keywordstyle=\color{keywords},
  commentstyle=\color{comments},
  backgroundcolor=\color{back}
}
* Processes
** Process Management

- Unix is a multitasking operating systems that allows more than one
  process to be run at one time
- A running program is called a process
  +  with a unique process ID (PID)
- Processes can run in the foreground or background, and can be
  combined in interesting ways using IO redirection

** Viewing Processes

- Command: \texttt{ps [options]}
- Common options:
  + \texttt{-a}: shows all processes attached to a terminal including those owned by other users
  + \texttt{-l}: displays additional information
  + \texttt{-u}: displays additional information about the user
  + \texttt{-w}: wide format, not truncated at end of line
  + \texttt{-x}: includes processes not attached to a terminal
  + \texttt{-U user}: filters according to specified user

- Examples:
  + \texttt{ps} (list processes in current terminal of current user)
  + \texttt{ps -aux} (list all processes)
  + \texttt{top} - offers similar information, but updates itself continuously

** Terminating Processes

- Processes no longer responding can be terminated with the kill
  command: 
  + \texttt{kill [-signal] PID}

- This command can be executed at various signal strengths. Signal
  strength 9 is the most brutal – only use as a last resort

- Common signals are:
  + \texttt{2}: Interrupt signal (same effect as Ctrl-C)
  + \texttt{9}: Emergency kill signal: cannot be ignored by a process
- Examples:
  + \texttt{kill 1964} \\ (kill process with PID 1964 as gently as possible)
  + \texttt{kill -9 1145} \\ (kill process with PID 1145 using maximum force)

** Signals

Basic communication between UNIX processes is done with  standardized
signals. You have already seen some that are useful for users to
communicate to processes. They have keyboard shot cuts:

- Ctrl-C INT (Interrupt)
- Ctrl-Z TSTP (Terminal SToP)
- Crtl-D EOF (End Of File)

There are many more...

Processes (programs) can handle signals.

** Scheduling Utilities

- cron

  + Allows jobs to be scheduled to run at particular times, and is
    generally used to execute repeated tasks

  + It operates by executing tasks when the system time matches a
    defined pattern. eg. cron can be told to clean up temporary files
    every Monday at 7am

  + The cron service is started at system startup and then wakes up
    every minute to check if a job needs to be started

  + The cron is modified with the crontab command, crontab -l lists

- at

  + at is similar to cron, but is used to execute once-off tasks,
    eg. at can be told to run find the next time 8:15 rolls around by
    typing 'at 08:15 <enter>-c find'<Ctrl-d>

** Editing the Cron

- Use the crontab -e command to edit the cron(, or kcron)

- Cron jobs are specified using an obscure syntax – type man 5 crontab
  for good documentation

- There are 6 columns in the file specifying the following (an * in
  the column leaves it unspecified):

  1. minute (0-59)
  2. hour (0-23)
  3. day of month (1-31)
  4. month (1-12)
  5. day of week (0-7)
  6. the command to be executed

** Cron Examples

#+BEGIN_SRC shell
  # run 5 minutes after midnight, every day
  5 0 * * * $HOME/bin/daily.job >> $HOME/tmp/out 2>&1
  # run at 10pm on weekdays, annoy Joe
  0 22 * * 1-5 mail joe “Where are your kids?”
  # run at 14:15 on the first of every month
  15 14 1 * * $HOME/bin/monthly-reports
#+END_SRC

* History

** History and Copyright

- Heikki Lehv\auml{}slaiho, heikki.lehvaslaiho@kaust.edu.sa \\
  CBRC, KAUST \\
  September 2011

- Heikki Lehv\auml{}slaiho, heikki@sanbi.ac.za \\
  SANBI, University of Western Cape \\
  March 2007

- John M. Ostrowick, jon@cs.wits.ac.za \\
  School of Computer Science, 
  University of the Witwatersrand \\
  June 2005

This work is licensed under the Creative Commons
Attribution-ShareAlike 3.0 Unported.  To view a copy of this license,
visit http://creativecommons.org/licenses/by-sa/3.0/

